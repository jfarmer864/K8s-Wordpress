tutorial on how to install at:
https://kubernetes.io/blog/2019/03/15/kubernetes-setup-using-ansible-and-vagrant/

basic commands for Kubernetes:

- kubectl version
check version of kubectl

- kubectl cluster-info
get information about current K8s cluster

- kubectl get nodes
shows all nodes in our cluster

- kubectl create deployment kubernetes-bootcamp --image=gcr.io/google-samples/kubernetes-bootcamp:v1
this creates a deployment from a docker image, the image we are using is the
Kubernetes Bootcamp, available from Google cloud container registry

- kubectl get deployments
lists all deployments on this cluster

- export POD_NAME=$(kubectl get pods -o go-template --template '{{range .items}}{{.metadata.name}}{{"\n"}}{{end}}')
get POD_NAME as environment variable

- kubectl get pods
get list of pods on the cluster (a pod is a group of one or more containers and
shared resources)

- kubectl describe pods
get extra details about the pods

- kubectl logs $POD_NAME
retrieve logs from the pod

- kubectl exec $POD_NAME env
execute command inside pod, in this case we see the environemnt variables
inside the pod

- kubectl exec -ti $POD_NAME bash
open a console with bash inside the pod

- kubectl get services
list the services running on the cluster

- kubectl expose deployment/kubernetes-bootcamp --type="NodePort" --port 8080
expose our deployment to the NodePort service, allowing external access to the app

- export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template='{{(index .spec.ports 0).nodePort}}')
get the port which the node is running on

- curl http://192.168.10.105:$NODE_PORT
access the app with the vagrant IP and node port

- kubectl get pods -l app=kubernetes-bootcamp
find pod with a label (in this case the label key is app and the value is
kubernetes-bootcamp)

- kubectl label pod $POD_NAME version=v1
make a new label with key and value

- kubectl delete service -l app=kubernetes-bootcamp
delete a service specified by its label

- kubectl get rs
see the replica set auto-generated by the deployment

- kubectl scale deployments/kubernetes-bootcamp --replicas=4
scale the deployment to 4 running pods/instances

- kubectl get pods -o wide
see pods which are running, or being updated/terminated

- kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
set a new image for the deployment, in this case we are updating from v1 to v2

- kubectl rollout status deployments/kubernetes-bootcamp
see status of rollout for new image

- kubectl rollout undo deployments/kubernetes-bootcamp
undo a rollout in case there was an issue
